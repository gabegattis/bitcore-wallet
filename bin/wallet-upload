#!/usr/bin/env node
'use strict';

var Readable = require('stream').Readable;
var program = require('commander');
var FormData = require('form-data');
var form = new FormData();
var utils = require('./cli-utils');
var http = require('http');
var https = require('https');
var fs = require('fs');
var Transform = require('stream').Transform;
var transform = new Transform({ objectMode: true });
var url = require('url');
var util = require('util');

function isTLS(url) {
  return url.protocol === 'https:';
}

program
  .option('-u, --url <url>', 'Server url to register with')
  .option('-f, --file <file>', 'Wallet file to refer to when registering')
  .option('-r, --rawfile <file>', 'Wallet raw file to refer to when registering')
  .usage('[options] e.g. wallet-register -f wallet.json -u https://example.com/wallet-api')
  .parse(process.argv);

var args = program.args;
// var walletFile = program.file;
// var walletRawFile = program.rawfile;

if (program.file || program.rawFile) {
  program.help();
}

var walletJSON;
var walletRawString;
var walletRawJSON;

if (program.file) {
  walletJSON = require(program.file);
}

if (program.rawFile) {
  walletRawString = fs.readFileSync(program.rawFile);
  walletJSON = JSON.parse(fs.readFileSync(walletRawString));
}

var urlStr = program.url || 'http://127.0.0.1:3001';
// var walletJSON = JSON.parse(fs.readFileSync(walletFile));
// var walletRaw = JSON.parse(fs.readFileSync(walletRawFile));
var walletId = walletJSON.walletId;
//
// if (!walletId) {
//   console.error('Wallet ID not specified in the wallet file provided, aborting.');
//   process.exit(1);
// }

function findAddress(line) {
  var re = /"address":\s+"(\w+)"/;
  var match = re.exec(line);
  if (match) {
    this.push('"' + match[1] + '",');
  }
}

transform._transform = function(chunk, enc, callback) {
  var data = chunk.toString();

  if (this._last) {
    data = this._last + data;
  }

  var lines = data.split('\n');
  this._last = lines.splice(lines.length-1,1)[0];

  var self = this;
  lines.forEach(findAddress.bind(self));
  callback();
};

transform._flush = function (callback) {
  if (this._last) {
    findAddress.call(this, this._last);
  }
  this._last = null;
  callback();
};

var addressReadStream = new Readable({ objectMode: true });
var readCounter = 0;
var counter = 0;
addressReadStream._read = function() {
  var address = walletJSON[readCounter];
  var toPush = '';
  if (readCounter === 0) {
    toPush  = '[';
  }
  if (!address) {
    toPush = null;
    this.push(toPush);
    return;
  }
  toPush = toPush + '"' + address + '"';
  readCounter++;

  if (readCounter === walletJSON.length) {
    toPush += ']';
  } else {
    toPush += ',';
  }
  this.push(toPush);
};

function upload(walletId, callback) {
  var data = walletRawString;
  var CRLF = '\r\n';
  var formOptions = { header:
    CRLF + '--' + form.getBoundary() + CRLF +
    'Content-Disposition: form-data; name="addresses"; filename="nofile.json;' + CRLF + CRLF,
    knownLength: data.length
  };

  form.append('addresses', data, formOptions);

  var parsedUrl = url.parse(urlStr);
  var httpOptions = {
    protocol: parsedUrl.protocol,
    hostname: parsedUrl.hostname,
    port: (parsedUrl.port || (isTLS(parsedUrl) ? 443 : 80)),
    method: 'POST',
    path: '/wallet-api/wallets/' + walletId + '/addresses',
    body: '',
    headers: form.getHeaders()
  };

  var error;
  var req = (isTLS(parsedUrl) ? https : http).request(httpOptions, function(res) {

    function finish(err, body) {
      if (err) {
        return callback(err);
      }
      if (res.statusCode < 200 || res.statusCode > 299) {
        return callback('Response code from server was ' + res.statusCode);
      }
      var json;
      if (body) {
        try {
          json = JSON.parse(body);
        } catch(e) {
          return callback(e);
        }
        if (json.jobId) {
          return callback(null, json.jobId);
        }
        return callback(new Error('Response json not as expected - no job id given in reply: ' + body));
      }
      callback(new Error('no body in response.'));
    }

    var body = '';
    res.on('data', function(chunk) {
      body += chunk;
    });

    res.on('end', function() {
      finish(error, body);
    });

  });

  req.on('error', function(e) {
    error = e;
  });

  form.pipe(req);
}

upload(walletId, function(err, jobId) {
  if(err) {
    return console.error(err);
  }
  console.log('upload in-progress, Wallet id: ' + walletId + ' job id: ' + jobId);
});
